{"version":3,"sources":["../index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,iBAAiB,CAAC;AAGvC,MAAM,CAAC,IAAM,aAAa,GAAQ;IAC9B,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC;CACpC,CAAC;AAaF,MAAM,KAAW,aAAa,CA6B7B;AA7BD,WAAiB,aAAa;IAQ1B;QAEI,MAAM,CAAC,SAAS,CAAC,cAAc,GAAG,UAAW,IAAmB;YAC5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,MAAM,CAAC,SAAS,CAAC,gBAAgB,GAAG;YAEhC,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC;YAElC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACpB,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,QAAQ,CAAC;gBAC7B,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAEnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;IACN,CAAC;IApBe,kBAAI,OAoBnB,CAAA;AACL,CAAC,EA7BgB,aAAa,KAAb,aAAa,QA6B7B;AAED,CAAC,cAAa,OAAA,aAAa,CAAC,IAAI,EAAE,EAApB,CAAoB,CAAC,EAAE,CAAC","file":"index.js","sourceRoot":"","sourcesContent":["import {Router} from \"@angular/router\";\nimport {NavigationExtras} from \"@angular/router/src/router\";\n\nexport const REFLECT_CLASS: any = {\n    ROUTER: Object.assign({}, Router)\n};\n\ndeclare module \"@angular/router\" {\n\n    export class Router extends REFLECT_CLASS.ROUTER {\n\n        private _sendingData: any;\n\n        public navigateByData( data: ReflectRouter.NavigatedData ) : Promise<boolean>;\n        public getNavigatedData(): any;\n    }\n}\n\nexport namespace ReflectRouter {\n\n    export interface NavigatedData {\n        url: Array<any>,\n        data: any,\n        extras?: NavigationExtras\n    }\n\n    export function init() : void\n    {\n        Router.prototype.navigateByData = function ( data: NavigatedData ) : Promise<boolean> {\n            this._sendingData = data.data;\n            return this.navigate(data.url, data.extras);\n        };\n\n        Router.prototype.getNavigatedData = function () : any {\n\n            let data: any = this._sendingData;\n\n            if (Array.isArray(data))\n                data = Object.assign([], data);\n            else if (typeof data == \"object\")\n                data = Object.assign({}, data);\n\n            this._sendingData = null;\n\n            return data;\n        };\n    }\n}\n\n(() : void => ReflectRouter.init())();"]}